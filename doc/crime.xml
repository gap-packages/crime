<?xml version="2.0" encoding="ISO-8859-1"?>
<!DOCTYPE Book SYSTEM "gapdoc.dtd">
<Book Name="crime">

<#Include SYSTEM "title.xml">

<TableOfContents/>
<Body>

<Chapter><Heading>Introduction</Heading>

<Section><Heading>Installation and Loading</Heading>
Like other &GAP; packages, you download and unpack 
this package into &GAP;'s <K>pkg</K> directory. 
For example, if you were running &GAP; on some
machine with a Unix-based operating system
and &GAP; were installed in the directory 
<K>/usr/local/gap</K> then you would
do the following to install <Package>CRIME</Package>.
<Log><![CDATA[
$ cd /usr/local/gap/pkg
$ su
% wget https://github.com/gap-packages/crime/releases/download/v1.5/crime-1.6.tar.gz
% tar xvzf crime-1.6.tar.gz
]]>
</Log>
In this situation, users would load the package
with the <K>LoadPackage</K> command.
<Log><![CDATA[
$ gap
gap> LoadPackage("crime");
]]>
</Log>

Users not having root access, using
someone else's computer, or having bad
relationships with their network administrators,
could install the package into their home 
directories or into some other writable
directory such as <K>/tmp</K> and load
the package as follows.
<Log><![CDATA[
$ mkdir /tmp/pkg
$ cd /tmp/pkg
% wget https://github.com/gap-packages/crime/releases/download/v1.5/crime-1.6.tar.gz
$ tar xvzf crime-1.6.tar.gz
$ gap -l ';/tmp'
gap> LoadPackage("crime");
]]></Log>

Even simpler, users can simply install
the package in the <K>~/.gap</K> directory as follows.
<Log><![CDATA[
$ mkdir -p ~/.gap/pkg
$ cd ~/.gap/pkg
% wget https://github.com/gap-packages/crime/releases/download/v1.5/crime-1.6.tar.gz
% tar xvzf crime-1.6.tar.gz
$ gap
gap> LoadPackage("crime");
]]></Log>

Finally, it would be a good idea to run the test file
to confirm that all the functions work properly.
This can be accomplished as follows.
<Log><![CDATA[
gap> ReadPackage("crime", "tst/testall.g");
]]></Log>
You can count yourself lucky if &GAP; doesn't complain
about anything. There is also a longer running test
file for those having ample free time
described in Appendix <Ref Chap="test"/>.
</Section>

<Section><Heading>For Further Information</Heading>
The file <K>doc/example.*</K> contains the step-by-step
<Package>CRIME</Package> calculation of the cohomology
ring of the quaternion group. The file <K>doc/explanation.*</K>
contains a theoretical description of how the package
calculates the various cohomology products.
Users wishing to read the source code can
print all the programs in the <K>gap</K> directory with the 
program <K>gap/print.pl</K> which should be executed
in the <K>gap</K> directory.
</Section>

</Chapter>

<Chapter><Heading>Usage</Heading>
Unless otherwise specified,
all the functions described below taking an argument <K>n</K>
do whatever the manual says they do up to homological degree <K>n</K>.
These functions are idempotent in the sense that
called a second time with the same argument <K>n</K>, they
do nothing, but called with a bigger <K>n</K>,
they continue computing from where the previous
calculations finished.

<Section> <Heading>Cohomology Objects</Heading>

The computation of group cohomology involves
several calculations, the results of 
which are reused in later calculations, 
and are thus collected in an object of 
type <K>CObject</K>, which is created with the 
following command.

<ManSection>
<Oper Name="CohomologyObject" Arg="G, M" 
Comm="Makes cohomology object"/>
<Oper Name="CohomologyObject" Arg="G"
Comm="Makes cohomology object"
Label="CohomologyObjectNoMeatAxe"/>
<Returns>a <K>CObject</K>.</Returns>
<Description>
This function creates a <K>CObject</K> having components
the <M>p</M>-group <K>G</K>
and the &MeatAxe; module <K>M</K>, which should be
a <M>kG</M>-module where <M>G</M> the group <K>G</K> and
<M>k</M> a field of characteristic <M>p</M>.
Note that &MeatAxe; modules know what <M>k</M> is, but not
what <M>G</M> is, which is why this operation requires the user
to specify <M>G</M> but not <M>k</M>.
<P/>
Fortunately, most users don't need to know anything
about &MeatAxe; modules, 
being interested primarily in the case where 
<Alt Only="LaTeX"><M>k=\mathbb{F}_p</M>,</Alt>
<Alt Not="LaTeX"><M>k=GF(p)</M></Alt> and
<M>M=k</M> is the trivial <M>kG</M>-module. In this situation, 
the second invocation creates a cohomology 
object having components
the <M>p</M>-group <M>G</M> and
the trivial &MeatAxe; <M>kG</M>-module
<Alt Only="LaTeX"><M>k=\mathbb{F}_p</M>.</Alt>
<Alt Not="LaTeX"><M>k=GF(p)</M>.</Alt>
</Description></ManSection>
<P/>

We emphasize that in the first invocation,
<M>k</M> can be any field of characteristic
<M>p</M> and <K>M</K> can be any &MeatAxe; module
over <M>kG</M>, and that <K>ProjectiveResolution</K>
works when <K>M</K> is an arbitrary &MeatAxe; module, 
but that all the functions dealing with the ring-structure of 
<Alt Only="LaTeX"><M>H^\ast\left(G,k\right)</M> 
</Alt><Alt Not="LaTeX"><M>H*(G,k)</M></Alt>
require that <K>M</K> be the trivial module.

<P/>The cohomology object is used to store, in addition
to the items mentioned above,
the boundary maps, the Betti numbers, the multiplication
table, etc.
</Section>

<Section><Heading>Minimal Projective Resolutions</Heading>

Given a <M>p</M>-group <M>G</M>, a field
<M>k</M> of characteristic <M>p</M>, and
a <M>kG</M>-module <M>M</M>,
the function below computes the beginning of
the minimal projective resolution of <M>M</M>
<Alt Only="LaTeX">
<Display> P_n\rightarrow\cdots\rightarrow P_2\rightarrow P_1
\rightarrow P_0\rightarrow M\rightarrow 0 </Display>
where <M>P_i=\left(kG\right)^{\oplus b_i}</M> 
</Alt>
<Alt Not="LaTeX">
<Display> P_n -> ... -> P_2 -> P_1 -> P_0 -> M -> 0</Display>
where <M>P_i</M> is the direct sum <M>(kG)^(b_i)</M> 
</Alt>
for certain numbers <M>b_i</M>, 
the <E>Betti numbers</E> of the resolution.
The minimal <M>kG</M>-projective resolution of <M>M</M>
is unique up to chain isomorphism.
Because of the minimality of
<Alt Only="LaTeX"><M>P_\ast</M></Alt><Alt Not="LaTeX"><M>P</M></Alt>
the groups 
<Alt Only="LaTeX">
<M>\mathrm{Ext}^i_{kG}\left(M,N\right)</M></Alt>
<Alt Not="LaTeX"><M>Ext^i(M,N)</M></Alt>
are simply 
<Alt Only="LaTeX">
<M>\mathrm{Hom}_{kG}\left(P_i,N\right)</M>,</Alt>
<Alt Not="LaTeX"><M>Hom(P_i,N)</M>,</Alt>
and if <M>M</M> and <M>N</M> are both the trivial <M>kG</M>-module <M>k</M>, then
<Alt Only="LaTeX">
<M>H^i\left(G,k\right)=\mathrm{Ext}^i_{kG}
\left(k,k\right)=k^{b_i}</M>.</Alt>
<Alt Not="LaTeX">
<M>H^i(G,k)=Ext^i(k,k)=k^(b_i)</M>.</Alt>

<ManSection><Oper Name="ProjectiveResolution" Arg="C, n"
Comm="Computes a minimal projective resolution"/>
<Returns>a list containing the Betti numbers 
<M>b_0, b_1,\ldots, b_n</M>.</Returns>

<Description>
Given a cohomology object <K>C</K> having
components <M>G</M> and <M>M</M>,
this function computes the first <K>n</K><M>+1</M> terms 
of the minimal projective resolution 
<Alt Only="LaTeX"><M>P_\ast</M></Alt><Alt Not="LaTeX"><M>P</M></Alt>
of <M>M</M> of the form
<Alt Only="LaTeX">
<M>P_i=\left(kG\right)^{\oplus b_i}</M> 
for <M>0\leq i\leq n</M></Alt>
<Alt Not="LaTeX">
<M>P_i=(kG)^(b_i)</M>
for <M>i=0,1,...,n</M></Alt> 
and returns the numbers <M>b_i</M> as a list.
</Description></ManSection>

<ManSection><Oper Name="BoundaryMap" Arg="C, n"
Comm="Returns the nth boundary map"/>
<Returns>the <K>n</K>th boundary map.</Returns>
<Description>
Given the cohomology object <K>C</K>, this function
computes a projective resolution to degree <K>n</K> 
if it hasn't been computed already,
and returns the <K>n</K>th boundary map
<M>P_n \rightarrow P_{n-1}</M>.

<P/>The map returned is a
<Alt Only="LaTeX">
<M>b_n\times b_{n-1}\left|G\right|</M></Alt>
<Alt Not="LaTeX">
<M>b_n x b_{n-1}|G|</M></Alt>
matrix, having in the <M>i</M>th row the image of the element
<M>1_G</M> from the <M>i</M>th direct summand of
<M>P_n</M>.

<P/>See the file <K>doc/example.*</K> for an example
of the usage and interpretation of the result of
this function.
</Description></ManSection>

</Section>

<Section><Heading>Cohomology Generators and Relators</Heading>
See <Cite Key="carlson"/> for the details of the calculation
of cohomology products using composition of chain maps.
See also the file <K>doc/explanation.*</K>
for an explanation of the implementation.

<ManSection><Oper Name="CohomologyGenerators" Arg="C, n"
Comm="Calculates generators of the cohomology ring"/>
<Returns>a list containing the degrees of the elements of
a set of generators of the cohomology ring.</Returns>
<Description>
Given a cohomology object <K>C</K> having group component <M>G</M>
and module component the trivial <M>kG</M>-module, 
this function computes a set of generators of 
<Alt Only="LaTeX">
<M>H^\ast\left(G,k\right)</M> 
</Alt><Alt Not="LaTeX">
<M>H*(G,k)</M> 
</Alt>
having degree <K>n</K> or less, and stores them in <K>C</K>.
The function returns a list of the degrees of these generators.
</Description></ManSection>

The actual cohomology generators are represented by
maps <M>P_i \rightarrow k</M> 
for <M>0\le i\le n</M>
and are stored in <K>C</K>
as matrices. Only their degrees are returned.

<ManSection><Oper Name="CohomologyRelators" Arg="C, n"
Comm="Calculates the relators of the cohomology ring"/>
<Returns>a list of generators and a list of relators.</Returns>
<Description>
Given a cohomology object <K>C</K> having group component <M>G</M>
and module component <M>k</M>, this function computes a set of
generators of the ideal of relators in 
<Alt Only="LaTeX">
<M>H^\ast\left(G,k\right),</M> 
</Alt><Alt Not="LaTeX">
<M>H*(G,k),</M> 
</Alt>
all having degree <M>n</M> or less.

<P/>More specifically, the function returns two lists, the first list containing
the variables <K>z</K>, <K>y</K>, <K>x</K>, <M>\ldots</M>
corresponding to the generators of
<Alt Only="LaTeX">
<M>H^\ast\left(G,k\right)</M></Alt>
<Alt Not="LaTeX">
<M>H*(G,k)</M></Alt>
if there are fewer than 12 generators and containing the 
variables <K>x&uscore;1</K>, <K>x&uscore;2</K>,  <K>x&uscore;3</K>,
<M>\ldots</M>
otherwise. The second list is a list of polynomials
in the variables from the first list.

<P/>These two lists should be interpreted as follows. 
A degree <K>n</K> approximation of the cohomology ring
<Alt Only="LaTeX">
<M>H^\ast\left(G,k\right)</M> 
</Alt><Alt Not="LaTeX">
<M>H*(G,k)</M> </Alt>
is given by the polynomial ring over <M>k</M> in the 
non-commuting variables from the first list,
(having degrees given by the list returned by
<K>CohomologyGenerators</K> 
in section <Ref Sect="CohomologyGenerators"/> ) 
and subject to the relators in the second list. 
See section <Ref Sect="whathappens"/> for more details still.
</Description></ManSection>

For example, consider the following commands.
<Example>
<![CDATA[
gap> C:=CohomologyObject(DihedralGroup(8));
<object>
gap> CohomologyGenerators(C,10);
[ 1, 1, 2 ]
gap> CohomologyRelators(C,10);
[ [ z, y, x ], [ z*y+y^2 ] ]
]]></Example>
This tells us that for <M>G=D_8</M>
and <Alt Only="LaTeX"><M>k=\mathbb{F}_p</M>,</Alt>
<Alt Not="LaTeX"><M>k=GF(p)</M></Alt> 
the cohomology ring
<Alt Only="LaTeX">
<M>H^\ast\left(G,k\right)</M> 
</Alt><Alt Not="LaTeX">
<M>H*(G,k)</M> 
</Alt>
is the graded-commutative polynomial ring in the variables
<M>z</M>, <M>y</M>, <M>x</M> of degrees 1, 1, 2,
subject to the relation
<M>zy+y^2</M>. But since
<Alt Only="LaTeX">
<M>H^\ast\left(G,k\right)</M> 
</Alt><Alt Not="LaTeX">
<M>H*(G,k)</M> 
</Alt>
is commutative, <M>k</M> being of
characteristic 2, we have
<Alt Only="LaTeX">
<M>H^\ast\left(G,k\right)=k\left[z,y,x\right]
\left/\left(zy+y^2\right)\right.</M>.
</Alt><Alt Not="LaTeX">
<M>H*(G,k)=k[z,y,x]/(zy+y^2)</M>.
</Alt>
This result can be further improved by
taking <M>z=z+y</M>, giving
<Alt Only="LaTeX">
<M>H^\ast\left(G,k\right)=k\left[z,y,x\right]
\left/\left(zy\right)\right.</M>.
</Alt><Alt Not="LaTeX">
<M>H*(G,k)=k[z,y,x]/(zy)</M>.
</Alt>

<P/>Observe that in this case, we knew in advance
that there was a set of generators for
<Alt Only="LaTeX"><M>H^\ast\left(G,k\right)</M></Alt>
<Alt Not="LaTeX"><M>H*(G,k)</M></Alt> 
all having degree less than 10, and that there was
a set of generators of the ideal of relators
all having degree less than 10. See
see section <Ref Sect="whathappens"/> for details.

<P/>While this isn't likely to occur, we point
out that if there are 12 or more generators 
and some of the indeterminates
<K>x&uscore;1</K>, <K>x&uscore;2</K>,  <K>x&uscore;3</K>,
<M>\ldots</M> have already been named, say by a previous
call to <K>CohomologyRelators</K>, then these variables
will retain their old names. If this is confusing, you could
restart &GAP; and do it again.

<P/>Finally, <K>CohomologyRelators</K> is <E>not</E> idempotent
for efficiency reasons, so sadly, if you don't uncover all the
relators the first time, you will have to start all over from
the beginning.
</Section>

<Section Label="completion"><Heading>Tests for Completion</Heading>
A test or series of tests for completion
of the calculation will hopefully
be implemented soon.
See <Cite Key="carlson"/> for the details.
</Section>

<Section Label="ring"><Heading>Cohomology Rings</Heading>
Whereas the operations in sections <Ref Sect="CohomologyGenerators"/>
and <Ref Sect="CohomologyRelators"/> calculate a presentation
for the cohomology ring, the operation below creates the ring
in &GAP; as a structure constant algebra.

<P/>See <Cite Key="carlson"/> for the details of the calculation
of cohomology products using composition of chain maps.
See also the file <K>doc/explanation.*</K>
for an explanation of the implementation.

<ManSection>
<Oper Name="CohomologyRing" Arg="C, n"
Comm="Calculates the cohomology ring"/>
<Oper Name="CohomologyRing" Arg="G, n"
Comm="Calculates the cohomology ring"
Label="CohomologyRingGroupComp"/>
<Returns>the cohomology ring of <M>G</M>.</Returns>
<Description>
Given a cohomology object <K>C</K> with group component <M>G</M> and
module component the trivial <M>kG</M>-module,
this function returns the degree <K>n</K> truncation of the cohomology ring 
<Alt Only="LaTeX"><M>H^\ast\left(G,k\right).</M></Alt>
<Alt Not="LaTeX"><M>H*(G,k)</M>.</Alt> 
See <Ref Sect="whathappens"/> for what this
means exactly.

The object returned is a structure constant algebra.

<P/>Users interested only in working with
the cohomology ring of a group as a &GAP;
object, and not in calculating generators, relators, induced
maps, etc, can use the second invocation of this function,
which returns the cohomology ring of the group <K>G</K>
immediately, throwing away all intermediate calculations.

<P/>Observe that the object returned is a degree
<K>n</K> truncation of the infinite-dimensional
cohomology ring. A consequence of this is that
multiplying two elements whose product
has degree greater than <K>n</K> results in zero,
whether or not the product is really zero.

<P/>Observe also that calling <K>CohomologyRing</K> 
a second time with a bigger <K>n</K> does 
<E>not</E> extend the previous ring, 
but rather, recalculates the entire ring
from the beginning. Extending the previous
ring appears not to be worth the effort
for technical reasons, since almost everything
would need to be recalculated again anyway.
</Description></ManSection>

Recall that 
<Alt Only="LaTeX"><M>H^\ast\left(G,k\right)</M></Alt>
<Alt Not="LaTeX"><M>H*(G,k)</M></Alt> 
is a graded algebra, the components being
the cohomology groups
<Alt Only="LaTeX"><M>H^i\left(G,k\right)</M>.</Alt>
<Alt Not="LaTeX"><M>H^i(G,k)</M>.</Alt> 
The following functions were intended to be used for cohomology rings,
but in principle, they work for any graded structure constant algebra.

<ManSection>
<Oper Name="IsHomogeneous" Arg="e"
Comm="Determines whether e is homogeneous"/>
<Returns><K>true</K> or <K>false</K>.</Returns>
<Description>
Given an element <K>e</K> of a cohomology ring
<Alt Only="LaTeX"><M>H^\ast\left(G,k\right)</M>,</Alt>
<Alt Not="LaTeX"><M>H*(G,k)</M>,</Alt> 
this operation determines 
whether or not <K>e</K> is homogeneous, 
that is, whether <K>e</K> is contained in 
<Alt Only="LaTeX"><M>H^i\left(G,k\right)</M></Alt>
<Alt Not="LaTeX"><M>H^i(G,k)</M></Alt> 
for some <K>i</K>.
</Description></ManSection>

<ManSection>
<Meth Name="Degree" Arg="e"
Comm="Determines the degree of e"/>
<Returns>the degree of <K>e</K>.</Returns>
<Description>
This function returns the degree of the
possibly non-homogeneous element <K>e</K> of a 
cohomology ring
<Alt Only="LaTeX"><M>H^\ast\left(G,k\right)</M>.</Alt>
<Alt Not="LaTeX"><M>H*(G,k)</M>.</Alt> 
Specifically, if 
<Alt Only="LaTeX">
<M>H^\ast\left(G,k\right)=A_0\oplus A_1\oplus A_2\oplus\cdots</M>
</Alt><Alt Not="LaTeX">
<M>H*(G,k) = A_0 + A_1 + A_2 + \ldots</M>
</Alt>
where 
<Alt Only="LaTeX"><M>A_i=H^i\left(G,k\right)</M></Alt>
<Alt Not="LaTeX"><M>A_i = H^i(G,k)</M></Alt> 
then this function returns the
minimum <M>n</M> such that <K>e</K> is in
<Alt Only="LaTeX">
<M>A_0\oplus A_1\oplus\cdots\oplus A_n</M>.
</Alt><Alt Not="LaTeX">
<M>A_0 + A_1 + \ldots + A_n</M>.
</Alt>
</Description></ManSection>

<Example><![CDATA[
gap> A:=CohomologyRing(DihedralGroup(8),10);
<algebra of dimension 66 over GF(2)>
gap> b:=Basis(A);
CanonicalBasis( <algebra of dimension 66 over GF(2)> )
gap> x:=b[2]+b[4];
v.2+v.4
gap> IsHomogeneous(x);
false
gap> Degree(x);
2 
]]></Example>

<ManSection>
<Func Name="LocateGeneratorsInCohomologyRing" Arg="C"
Comm="Locates the cohomology generators"/>
<Returns>a list containing the cohomology generators.</Returns>
<Description>
Having already called <K>CohomologyRing</K> 
(see <Ref Subsect="CohomologyRing"/>),
this function returns a list of elements of
the cohomology ring which together with the
identity element generate the cohomology ring.

<P/>This function is a wrapper for <K>CohomologyGenerators</K>
(see <Ref Subsect="CohomologyGenerators"/>).
It points out which elements of the cohomology
ring correspond with the generators found
by <K>CohomologyGenerators</K>.
</Description>
</ManSection>

<Example><![CDATA[
gap> C:=CohomologyObject(SmallGroup(8,4));
<object>
gap> A:=CohomologyRing(C,10);
<algebra of dimension 17 over GF(2)>
gap> L:=LocateGeneratorsInCohomologyRing(C);
[ v.2, v.3, v.7 ]
gap> A=Subalgebra(A,Concatenation(L,[One(A)]));
true
]]></Example>
</Section>

<Section Label="whathappens">
<Heading>What Happens if <K>n</K> Isn't
Big Enough?</Heading>
Since
<Alt Only="LaTeX"><M>P_\ast</M></Alt><Alt Not="LaTeX"><M>P</M></Alt>
is a <E>minimal</E> projective resolution, we have
<Alt Only="LaTeX">
<M>H^i\left(G,k\right) = \mathrm{Hom}_{kG}\left(P_i,k\right)</M>
</Alt><Alt Not="LaTeX">
<M>H^i(G,k) = Hom_{{kG}}(P_i,k)</M></Alt>
where <M>P_i = \left(kG\right)^{b_i}</M>
so that <M>H^i\left(G,k\right)</M>
has a natural basis consisting of the maps
sending the element <M>1_G</M> of the <M>j</M>th
direct summand of <M>P_i</M> to <M>1_k</M>
and all other direct summands to <M>0</M>, for 
<Alt Only="LaTeX">
<M>1\le j\le b_i</M>,</Alt>
<Alt Not="LaTeX">
<M>j=1,2,\ldots,b_i</M>,</Alt>
where <M>b_i</M> is the <M>kG</M>-rank of <M>P_i</M>.

<P/>The command <K>CohomologyRing(C,n)</K> forms the vector
space whose basis is the concatenation of the natural bases of 
<M>H^i\left(G,k\right)</M> for
<Alt Only="LaTeX">
<M>1\le i\le n</M></Alt>
<Alt Not="LaTeX">
<M>i=1,2,\ldots,n</M></Alt>
and computes all products of basis elements <M>x</M> and <M>y</M>
for which <M>\deg x+\deg y \leq n</M>.
Thinking of 
<Alt Only="LaTeX"><M>H^\ast\left(G,k\right)</M></Alt>
<Alt Not="LaTeX"><M>H*(G,k)</M></Alt> 
in terms of it's multiplication table, this means that
the function computes the upper left-hand corner
of the multiplication table.
If <M>\deg x + \deg y > n</M>,
the product <M>xy</M> is taken to be zero.
Therefore, the ring returned by <K>CohomologyRing</K> is
<Alt Only="LaTeX">
<M>H^\ast\left(G,k\right)\left/J_{&gt;n}\right.</M> 
</Alt><Alt Not="LaTeX">
<M>H*(G,k)/J</M></Alt>
where <Alt Only="LaTeX"><M>J_{>n}</M></Alt>
<Alt Not="LaTeX"><M>J</M></Alt>
is the ideal of all elements of degree <M>>n</M>.

<P/>The ring determined by <K>CohomologyGenerators</K>
and <K>CohomologyRelators</K> is somewhat different.
<K>CohomologyGenerators</K> proceeds inductively,
taking all natural basis elements of 
<M>H^1\left(G,k\right)</M> as generators, and for
<Alt Only="LaTeX">
<M>1&lt;i\le n</M>,</Alt> 
<Alt Not="LaTeX">
<M>i=2\ldots n</M>,</Alt> 
taking all natural basis elements
of <M>H^i\left(G,k\right)</M> which are <E>not</E>
products of lower-degree elements as generators.
Therefore, unless you know that there is an <M>n</M> for which
there exists a generating set of 
<Alt Only="LaTeX">
<M>H^\ast\left(G,k\right)</M> 
</Alt><Alt Not="LaTeX">
<M>H*(G,k)</M></Alt> 
consisting of elements of degree <M>n</M> or less,
then you are <E>not</E> guaranteed
that the elements returned by the
<K>CohomologyGenerators</K> generate
<Alt Only="LaTeX">
<M>H^\ast\left(G,k\right)</M> 
</Alt><Alt Not="LaTeX">
<M>H*(G,k)</M></Alt> 
as a ring. The knowledge of such an <M>n</M> is the subject of
section <Ref Sect="completion"/>.

<P/>Similarly, <K>CohomologyRelators</K> proceeds inductively
until degree <M>n</M>, returning a list of polynomials which
generate the ideal of relators of degree <M>n</M> or less.
Again, you have to already know how big <M>n</M> should be.

<P/>The result of the preceding information is
that there is a homomorphism
<Alt Only="LaTeX">
<M>f:k\left.\left\langle x_1,x_2,\dots,x_m \right\rangle\right./I
\to H^\ast\left(G,k\right)</M>,</Alt> 
<Alt Not="LaTeX">
<M>k\left\langle x_1,x_2,\ldots, x_m \right\rangle/ I \to H*(G,k)</M>,</Alt>
where <M>k\left\langle x_1,x_2,\ldots,x_m \right\rangle</M>
is the graded polynomial ring over <M>k</M> in 
the non-commuting variables <M>x_1,x_2,\ldots,x_m</M>,
having degrees the numbers in the list returned by <K>CohomologyGenerators</K>,
and <M>I</M> is the ideal in
<M>k\left\langle x_1,x_2,\ldots, x_m \right\rangle</M>
generated by the elements returned by
<K>CohomologyRelators(C,n)</K>.

<P/>Therefore, if there is a 
generator of degree greater than <M>n</M>,
then <M>f</M> won't be surjective.
Similarly, if there is a relator of degree
greater than <M>n</M> which is not a consequence
of lower degree relators, then <M>f</M>
won't be injective.

See section <Ref Sect="completion"/> for a discussion on how
big <M>n</M> needs to be to ensure that
<M>f</M> will be an isomorphism.

</Section>

<Section><Heading>Induced Maps</Heading>
Let <M>f: H \rightarrow G</M> be a group homomorphism.
Then <M>f</M> induces a homomorphism on cohomology 
<Alt Only="LaTeX">
<M>H^\ast\left(G,k\right)
\to H^\ast\left(H,k\right)</M>
</Alt><Alt Not="LaTeX">
<M>H\ast(G,k) \rightarrow H\ast(H,k)</M></Alt>
which is returned by the following function.

<ManSection>
<Func Name="InducedHomomorphismOnCohomology" Arg="C, D, f, n"
Comm="Computes the induced homomorphism on cohomology"/>
<Returns>the induced homomorphism on cohomology.</Returns>
<Description>
This function returns the induced homomorphism
<Alt Only="LaTeX">
<M>H^\ast\left(G,k\right)
\to H^\ast\left(H,k\right)</M></Alt>
<Alt Not="LaTeX"><M>H\ast(G,k) \rightarrow H\ast(H,k)</M></Alt>
where the groups <M>H</M> and <M>G</M> are the components
of the cohomology objects <K>C</K> and <K>D</K>
and <M>f: H \rightarrow G</M> is a group homomorphism.
If the cohomology rings have not yet been
calculated, they will be computed to degree <M>n</M>,
and in this case, they can then be accessed 
by calling <K>CohomologyRing</K> (see <Ref Subsect="CohomologyRing"/>). 
</Description></ManSection>

<ManSection>
<Func Name="SubgroupInclusion" Arg="H, G" Comm="Returns the inclusion"/>
<Returns>the inclusion <M>H\rightarrow G</M></Returns>
<Description>This function returns the group homomorphism
<M>H\rightarrow G</M> when <M>H</M> is a subgroup
of <M>G</M>. The returned map can be used as the
<K>f</K> argument of <K>InducedHomomorphismOnCohomology</K>,
in which case the induced homomorphism is the
restriction map
<Alt Only="LaTeX">
<M>\mathrm{Res}^G_H:H^\ast\left(G,k\right)
\to H^\ast\left(H,k\right)</M>.
</Alt><Alt Not="LaTeX">
<M>Res: H\ast(G,k) \rightarrow H\ast(H,k)</M>.</Alt>
</Description></ManSection>

The following example calculates the
homomorphism on cohomology induced by
the inclusion of the cyclic group of size 4
into the dihedral group of size 8.

<Example>
<![CDATA[
gap> G:=DihedralGroup(8);H:=Subgroup(G,[G.2]);
<pc group of size 8 with 3 generators>
Group([ f2 ])
gap> C:=CohomologyObject(H);D:=CohomologyObject(G);
<object>
<object>
gap> i:=SubgroupInclusion(H,G);
[ f2 ] -> [ f2 ]
gap> Res:=InducedHomomorphismOnCohomology(C,D,i,10);;
gap> A:=CohomologyRing(D,10);
<algebra of dimension 66 over GF(2)>
gap> LocateGeneratorsInCohomologyRing(D);
[ v.2, v.3, v.6 ]
gap> A.1^Res; A.2^Res; A.3^Res; A.6^Res;
v.1
0*v.1
v.2
v.3
]]>
</Example>

</Section>
<Section><Heading>Massey Products</Heading>
See <Cite Key="kraines"/> for the definitions
and <Cite Key="borge"/> for the details of the
calculation using the Yoneda cocomplex.
See also the file <K>doc/explanation.*</K>
for an explanation of the implementation.
<ManSection>
<Func Name="MasseyProduct" Arg="x1, x2, ... , xn"
Comm="Computes the Massey product &tlt;L&tgt;"/>
<Returns>the Massey product 
<Alt Only="LaTeX"> <M>\left\langle
x_1,x_2,\dots,x_n\right\rangle</M>.</Alt>
<Alt Not="LaTeX"> <M>\left\langle x1, x2, ... , xn\right\rangle</M>.</Alt>
</Returns>
<Description> Given elements
<Alt Only="LaTeX"> <M>x_1,x_2,\dots,x_n</M></Alt>
<Alt Not="LaTeX"> <M>x1, x2, \ldots , xn</M></Alt>
of the ring returned by
<K>CohomologyRing</K> (see <Ref Sect="ring"/>)
this function computes the <M>n</M>-fold Massey product
<Alt Only="LaTeX">
<M>\left\langle x_1,x_2,\ldots,x_n\right\rangle</M></Alt>
<Alt Not="LaTeX">
<M>\left\langle&nbsp;x1, x2, \ldots , xn&nbsp;\right\rangle</M></Alt>
provided that the lower-degree Massey products
<Alt Only="LaTeX">
<M>\left\langle x_i,x_{i+1},\ldots,x_j\right\rangle</M></Alt>
<Alt Not="LaTeX">
<M>\left\langle&nbsp;xi, x{{i+1}}, \ldots , xj&nbsp;\right\rangle</M></Alt>
vanish for all <M>1 \leq i &lt; j \leq n</M> and returns <K>fail</K> otherwise.
</Description>
</ManSection>

As an example, recall that the cohomology rings of the cyclic
groups <M>C_3</M> and <M>C_9</M> of sizes 3 and 9 over
<Alt Only="LaTeX"><M>k=\mathbb{F}_3</M></Alt>
<Alt Not="LaTeX"><M>k=GF(3)</M></Alt> 
are both given by
<Alt Only="LaTeX">
<M>k\left\langle z, y\right\rangle\left/\left(z^2\right)\right.</M>,
</Alt><Alt Not="LaTeX">
<M>k\left\langle&nbsp;z,y&nbsp;\right\rangle/\left(z^2\right)</M>,</Alt>
so they are isomorphic as rings. However, the following
example shows that
<Alt Only="LaTeX">
<M>\left\langle z,z,z\right\rangle</M></Alt>
<Alt Not="LaTeX">
<M>\left\langle&nbsp;z, z, z&nbsp;\right\rangle</M></Alt>
is non-zero in 
<Alt Only="LaTeX"><M>H^\ast\left(C_3,k\right)</M></Alt>
<Alt Not="LaTeX"><M>H*(C_3,k)</M></Alt> 
but is zero in
<Alt Only="LaTeX"><M>H^\ast\left(C_9,k\right)</M>.</Alt>
<Alt Not="LaTeX"><M>H*(C_9,k)</M>.</Alt>
<Example>
<![CDATA[
gap> A:=CohomologyRing(CyclicGroup(3),10);
<algebra of dimension 11 over GF(3)>
gap> z:=Basis(A)[2];
v.2
gap> MasseyProduct(z,z);
0*v.1
gap> MasseyProduct(z,z,z);
v.3
gap> A:=CohomologyRing(CyclicGroup(9),10);
<algebra of dimension 11 over GF(3)>
gap> z:=Basis(A)[2];
v.2
gap> MasseyProduct(z,z);
0*v.1
gap> MasseyProduct(z,z,z);
0*v.1
gap> MasseyProduct(z,z,z,z,z,z,z,z,z);
v.3
]]>
</Example>
</Section>
</Chapter>
</Body>

<Appendix Label="benchmarks"><Heading>Some Benchmarks</Heading>
Some of the key subroutines have been improved
in version 1.2 of <Package>CRIME</Package>, resulting in a
significant speedup of many basic calculations.

<P/>The numbers in the following table compare the runtimes
of the 1.1 and 1.2 versions of the
functions listed in the column headers
on all the groups of size 16.
All functions were executed on a 2.4 GHz AMD64 processor with 12 GB of RAM.
The number in the first column of every row
is the Small Group Library number of the
group used in that row, so the group used in row <K>n</K>
is <K>SmallGroup(16,n)</K>.
The upper number in each box is the runtime for the 1.1 version, whereas the 
lower number is the runtime for the 1.2 version.
<Table Align="c|c|c|c">
<Row>
<Item>Group</Item>
<Item><K>ProjectiveResolution</K></Item>
<Item><K>CohomologyGenerators</K></Item>
<Item><K>CohomologyRelators</K></Item>
</Row>

<HorLine></HorLine><Row>
<Item>1</Item>
<Item>0:00:00.424</Item>
<Item>0:00:00.040</Item>
<Item>0:00:00.092</Item>
</Row><Row>
<Item></Item>
<Item>0:00:00.380</Item>
<Item>0:00:00.016</Item>
<Item>0:00:00.012</Item>
</Row>

<HorLine></HorLine><Row>
<Item>2</Item>
<Item>0:00:00.436</Item>
<Item>0:00:01.472</Item>
<Item>0:00:05.848</Item>
</Row><Row>
<Item></Item>
<Item>0:00:00.072</Item>
<Item>0:00:00.116</Item>
<Item>0:00:00.396</Item>
</Row>

<HorLine></HorLine><Row>
<Item>3</Item>
<Item>0:00:02.752</Item>
<Item>0:00:11.469</Item>
<Item>0:00:42.887</Item>
</Row><Row>
<Item></Item>
<Item>0:00:00.352</Item>
<Item>0:00:01.192</Item>
<Item>0:00:01.944</Item>
</Row>

<HorLine></HorLine><Row>
<Item>4</Item>
<Item>0:00:00.480</Item>
<Item>0:00:01.456</Item>
<Item>0:00:06.320</Item>
</Row><Row>
<Item></Item>
<Item>0:00:00.068</Item>
<Item>0:00:00.116</Item>
<Item>0:00:00.316</Item>
</Row>

<HorLine></HorLine><Row>
<Item>5</Item>
<Item>0:00:00.480</Item>
<Item>0:00:01.136</Item>
<Item>0:00:06.045</Item>
</Row><Row>
<Item></Item>
<Item>0:00:00.080</Item>
<Item>0:00:00.096</Item>
<Item>0:00:00.296</Item>
</Row>

<HorLine></HorLine><Row>
<Item>6</Item>
<Item>0:00:00.204</Item>
<Item>0:00:00.724</Item>
<Item>0:00:01.892</Item>
</Row><Row>
<Item></Item>
<Item>0:00:00.036</Item>
<Item>0:00:00.072</Item>
<Item>0:00:00.116</Item>
</Row>

<HorLine></HorLine><Row>
<Item>7</Item>
<Item>0:00:00.504</Item>
<Item>0:00:01.156</Item>
<Item>0:00:06.140</Item>
</Row><Row>
<Item></Item>
<Item>0:00:00.088</Item>
<Item>0:00:00.100</Item>
<Item>0:00:00.344</Item>
</Row>

<HorLine></HorLine><Row>
<Item>8</Item>
<Item>0:00:00.192</Item>
<Item>0:00:00.704</Item>
<Item>0:00:01.800</Item>
</Row><Row>
<Item></Item>
<Item>0:00:00.036</Item>
<Item>0:00:00.064</Item>
<Item>0:00:00.120</Item>
</Row>

<HorLine></HorLine><Row>
<Item>9</Item>
<Item>0:00:00.060</Item>
<Item>0:00:00.100</Item>
<Item>0:00:00.284</Item>
</Row><Row>
<Item></Item>
<Item>0:00:00.020</Item>
<Item>0:00:00.012</Item>
<Item>0:00:00.028</Item>
</Row>

<HorLine></HorLine><Row>
<Item>10</Item>
<Item>0:00:10.161</Item>
<Item>0:00:34.326</Item>
<Item>0:03:07.104</Item>
</Row><Row>
<Item></Item>
<Item>0:00:01.524</Item>
<Item>0:00:04.252</Item>
<Item>0:00:08.089</Item>
</Row>

<HorLine></HorLine><Row>
<Item>11</Item>
<Item>0:00:10.397</Item>
<Item>0:00:32.354</Item>
<Item>0:03:07.355</Item>
</Row><Row>
<Item></Item>
<Item>0:00:01.716</Item>
<Item>0:00:04.584</Item>
<Item>0:00:08.021</Item>
</Row>

<HorLine></HorLine><Row>
<Item>12</Item>
<Item>0:00:01.184</Item>
<Item>0:00:04.613</Item>
<Item>0:00:20.789</Item>
</Row><Row>
<Item></Item>
<Item>0:00:00.192</Item>
<Item>0:00:00.544</Item>
<Item>0:00:00.984</Item>
</Row>

<HorLine></HorLine><Row>
<Item>13</Item>
<Item>0:00:01.152</Item>
<Item>0:00:04.496</Item>
<Item>0:00:20.990</Item>
</Row><Row>
<Item></Item>
<Item>0:00:00.196</Item>
<Item>0:00:00.472</Item>
<Item>0:00:01.072</Item>
</Row>

<HorLine></HorLine><Row>
<Item>14</Item>
<Item>0:03:26.817</Item>
<Item>0:07:37.960</Item>
<Item>0:56:39.273</Item>
</Row><Row>
<Item></Item>
<Item>0:00:41.919</Item>
<Item>0:02:07.399</Item>
<Item>0:01:54.752</Item>
</Row>
</Table>
</Appendix>

<Appendix Label="test"><Heading>Leisure and Recreation: Cohomology Rings
of all Groups of Size 16</Heading>
Below is the output of the test file 
<K>tst/batch.g</K>. The file runs through
all groups of size <M>n</M>, which
is initially set to <M>16</M>, calls
<K>ProjectiveResolution</K>, <K>CohomologyGenerators</K>,
and <K>CohomologyRelators</K> for each group, 
and prints the results, as well as 
the runtimes for each operation, to a file like the one shown below. The runtimes
in this example have been deleted, having been presented in
Appendix <Ref Chap="benchmarks"/>. The example
below was computed on a 2.4 GHz AMD64 processor
with 12 GB of RAM. 
See the file <K>tst/README</K> for suggestions
on dealing with other users when running long-running batch processes.
<Log><![CDATA[
SmallGroup(16,1)
Betti Numbers: [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
Generators in degrees: [ 1, 2 ]
Relators: [ [ z, y ], [ z^2 ] ]

SmallGroup(16,2)
Betti Numbers: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
Generators in degrees: [ 1, 1, 2, 2 ]
Relators: [ [ z, y, x, w ], [ z^2, y^2 ] ]

SmallGroup(16,3)
Betti Numbers: [ 1, 2, 4, 6, 9, 12, 16, 20, 25, 30, 36 ]
Generators in degrees: [ 1, 1, 2, 2, 2 ]
Relators: [ [ z, y, x, w, v ], [ z^2, z*y, z*x, y^2*v+x^2 ] ]

SmallGroup(16,4)
Betti Numbers: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
Generators in degrees: [ 1, 1, 2, 2 ]
Relators: [ [ z, y, x, w ], [ z^2, z*y+y^2, y^3 ] ]

SmallGroup(16,5)
Betti Numbers: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
Generators in degrees: [ 1, 1, 2 ]
Relators: [ [ z, y, x ], [ z^2 ] ]

SmallGroup(16,6)
Betti Numbers: [ 1, 2, 2, 2, 3, 4, 4, 4, 5, 6, 6 ]
Generators in degrees: [ 1, 1, 3, 4 ]
Relators: [ [ z, y, x, w ], [ z^2, z*y^2, z*x, x^2 ] ]

SmallGroup(16,7)
Betti Numbers: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
Generators in degrees: [ 1, 1, 2 ]
Relators: [ [ z, y, x ], [ z*y ] ]

SmallGroup(16,8)
Betti Numbers: [ 1, 2, 2, 2, 3, 4, 4, 4, 5, 6, 6 ]
Generators in degrees: [ 1, 1, 3, 4 ]
Relators: [ [ z, y, x, w ], [ z*y, z^3, z*x, y^2*w+x^2 ] ]

SmallGroup(16,9)
Betti Numbers: [ 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2 ]
Generators in degrees: [ 1, 1, 4 ]
Relators: [ [ z, y, x ], [ z*y, z^3+y^3, y^4 ] ]

SmallGroup(16,10)
Betti Numbers: [ 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66 ]
Generators in degrees: [ 1, 1, 1, 2 ]
Relators: [ [ z, y, x, w ], [ z^2 ] ]

SmallGroup(16,11)
Betti Numbers: [ 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66 ]
Generators in degrees: [ 1, 1, 1, 2 ]
Relators: [ [ z, y, x, w ], [ z*y ] ]

SmallGroup(16,12)
Betti Numbers: [ 1, 3, 5, 6, 7, 9, 11, 12, 13, 15, 17 ]
Generators in degrees: [ 1, 1, 1, 4 ]
Relators: [ [ z, y, x, w ], [ z^2+z*y+y^2, y^3 ] ]

SmallGroup(16,13)
Betti Numbers: [ 1, 3, 5, 6, 7, 9, 11, 12, 13, 15, 17 ]
Generators in degrees: [ 1, 1, 1, 4 ]
Relators: [ [ z, y, x, w ], [ z*y+x^2, z*x^2+y*x^2, y^2*x^2+x^4 ] ]

SmallGroup(16,14)
Betti Numbers: [ 1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286 ]
Generators in degrees: [ 1, 1, 1, 1 ]
Relators: [ [ z, y, x, w ], [  ] ]
]]>
</Log>
</Appendix>
<Bibliography Databases="crimebib.xml" Style="plain"/>
<TheIndex/>
</Book>
